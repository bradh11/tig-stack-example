[global_tags]

[agent]
interval = "15s"
round_interval = true
metric_batch_size = 1000
metric_buffer_limit = 10000
collection_jitter = "0s"
flush_interval = "10s"
flush_jitter = "0s"
precision = ""
hostname = "telegraf"
omit_hostname = false

[[outputs.influxdb]]
urls = ["http://influxdb:8086"]
database = "telegraf"
timeout = "5s"
username = "telegraf"
password = "telegraf"

# Basic Up/Down tracking
[[inputs.ping]]
interval = "5s"
urls = ["google.com", "amazon.com", "github.com"]
count = 4
ping_interval = 1.0
timeout = 2.0

############# Cisco MDT Plugin #########
# gRPC Dial-Out Telemetry Listener
[[inputs.cisco_telemetry_mdt]]
transport = "grpc"
service_address = ":57000"

## Define aliases to map telemetry encoding paths to simple measurement names
[inputs.cisco_telemetry_mdt.aliases]
# ifstats = "ietf-interfaces:interfaces-state/interface/statistics"


############## Collectd input from Expressway ############
[[inputs.socket_listener]]
service_address = "udp://:25826"

## Data format to consume.
## Each data format has its own unique set of configuration options, read
## more about them here:
##   https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
data_format = "collectd"

## Authentication file for cryptographic security levels
#collectd_auth_file = "/etc/telegraf/collectd/auth_file"
## One of none (default), sign, or encrypt
collectd_security_level = "none"
## Path of to TypesDB specifications
#collectd_typesdb = ["/etc/telegraf/collectd/types.db"]

## Multi-value plugins can be handled two ways.
## "split" will parse and store the multi-value plugin data into separate measurements
## "join" will parse and store the multi-value plugin as a single multi-value measurement.
## "split" is the default behavior for backward compatability with previous versions of influxdb.
collectd_parse_multivalue = "join"


############# SNMP EXAMPLES #############
[[inputs.snmp]]
agents = ["10.28.128.1:161"]
version = 2
community = "SecretSNMPstring"
interval = "60s"
timeout = "10s"
retries = 3

[[inputs.snmp.field]]
name = "hostname"
oid = ".1.3.6.1.2.1.1.5.0"
is_tag = true

[[inputs.snmp.field]]
name = "uptime"
oid = "1.3.6.1.2.1.1.3.0"

[[inputs.snmp.field]]
name = "cpmCPUTotal1min"
oid = ".1.3.6.1.4.1.9.9.109.1.1.1.1.4.7"

#####################################################
#
# Gather Interface Statistics via SNMP
#
#####################################################

# IF-MIB::ifTable contains counters on input and output traffic as well as errors and discards.
[[inputs.snmp.table]]
name = "interface"
inherit_tags = [ "hostname" ]
oid = "IF-MIB::ifTable"

# Interface tag - used to identify interface in metrics database
[[inputs.snmp.table.field]]
name = "name"
oid = "IF-MIB::ifDescr"
is_tag = true

# IF-MIB::ifXTable contains newer High Capacity (HC) counters that do not overflow as fast for a few of the ifTable counters
[[inputs.snmp.table]]
name = "interface"
inherit_tags = [ "hostname" ]
oid = "IF-MIB::ifXTable"

# Interface tag - used to identify interface in metrics database
[[inputs.snmp.table.field]]
name = "name"
oid = "IF-MIB::ifDescr"
is_tag = true

# EtherLike-MIB::dot3StatsTable contains detailed ethernet-level information about what kind of errors have been logged on an interface (such as FCS error, frame too long, etc)
[[inputs.snmp.table]]
name = "interface"
inherit_tags = [ "hostname" ]
oid = "EtherLike-MIB::dot3StatsTable"

# Interface tag - used to identify interface in metrics database
[[inputs.snmp.table.field]]
name = "name"
oid = "IF-MIB::ifDescr"
is_tag = true


#############  generic ##################
# remove comments below to add statistics from the local server running the stack
# [[inputs.cpu]]
#   percpu = true
#   totalcpu = true
#   collect_cpu_time = false
#   report_active = false
# [[inputs.disk]]
#   ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
# [[inputs.diskio]]
# [[inputs.kernel]]
# [[inputs.mem]]
# [[inputs.processes]]
# [[inputs.swap]]
# [[inputs.system]]